version: '3.8'

services:
  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: aiinvest-postgres
    environment:
      POSTGRES_USER: aiinvest
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: aiinvest
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiinvest"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aiinvest-network

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: aiinvest-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aiinvest-network

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: aiinvest-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - aiinvest-network

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: aiinvest-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: ''
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - postgres
    networks:
      - aiinvest-network

  # MinIO client to create initial bucket
  minio-init:
    image: minio/mc:latest
    container_name: aiinvest-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/aiinvest-artifacts --ignore-existing;
      /usr/bin/mc anonymous set download myminio/aiinvest-artifacts;
      exit 0;
      "
    networks:
      - aiinvest-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aiinvest-network:
    driver: bridge
